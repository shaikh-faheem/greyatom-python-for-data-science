# 1. Loading the data

# Import packages
import numpy as np
import pandas as pd
from scipy.stats import mode 
 
# Load Dataset
bank = pd.read_csv(path)

# Display categorical variable
categorical_var =  bank.select_dtypes(include = 'object')

numerical_var = bank.select_dtypes(include = 'number')

print(numerical_var)

# code ends here

# - - - - - - - - - - - -   - - - - - -   - - - - - 
'
# 2. Something is Missing!..'Sometimes customers forget to fill in all the details or they don't want to share other details'

# code starts here

# Load the dataset and drop the Loan_ID
banks = bank.drop('Loan_ID',axis=1)

# Check  all the missing values filled.
print(banks.isnull().sum())

bank_mode = banks.mode().iloc[0]

# Fill the missing values with 
banks.fillna(bank_mode, inplace=True)

#code ends here


# - - - - - - - - - - - - - - -   - - - -   - - - - - 

# 3. Loan Amount vs Gender...Now let's check the loan amount of an average person based on 'Gender', 'Married', 'Self_Employed'. This will give a basic idea of the average loan amount of a person.

# code starts here

# check the avg_loan_amount

avg_loan_amount = banks.pivot_table(values=["LoanAmount"], index=["Gender","Married","Self_Employed"], aggfunc=np.mean)

print (avg_loan_amount)
# code ends here

# - - --    - - - - - - - - - - -   - - -   - 

# 4.Loan Approval vs Employment...Now let's check the percentage of loan approved based on a person's employment type

# code starts here

# Code for loan aprroved for self employed
loan_approved_se = banks[(banks['Self_Employed']== 'Yes') & (banks['Loan_Status']== 'Y')].Self_Employed.count()
print(loan_approved_se)

# Code for loan aprroved for Non self employed
loan_approved_nse = banks[(banks['Self_Employed']== 'No') & (banks['Loan_Status']== 'Y')].Self_Employed.count()
print(loan_approved_nse)

# Percentage of loan approved for self employed
percentage_se = (loan_approved_se * 100 / 614)

# Percentage of loan for non self employed
percentage_nse = (loan_approved_nse * 100 / 614)

# Print percentage of loan for non self employed
print(percentage_nse)

# code ends here

# - - - - - - - - - - - - - - - - - - - - - - - -   

# 5. Transform the loan tenure from months to years

# code starts here

# Loan amount term 
loan_term = banks['Loan_Amount_Term'].apply(lambda x: x/12)
print(loan_term)

big_loan_term = banks[loan_term>=25].Loan_Amount_Term.count()
print(big_loan_term)

# code ends here

#   -- - -  - - - - - - - - - - - - -   - - - - --  

# 6. Income/ Credit History vs Loan Amount

# code starts here

loan_groupby = banks.groupby("Loan_Status")

loan_groupby = loan_groupby['ApplicantIncome', 'Credit_History']
print(loan_groupby)

# Check the mean value 
mean_values = loan_groupby.mean()
print(mean_values)

# code ends here









